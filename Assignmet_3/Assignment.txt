        1.DATA TYPES AND VARIABLES:
            What are the different data types used in JavaScript variables in the provided code?
                -Data types used in JavaScript are "string, number, boolean, Object"
            Explain the difference between var, let, and const in JavaScript.
                -we use "let" to declare variables in that are mutable/mutated meaning the data stored in them can be modified with time.
                -we use "const" to declare variables that are not supposed to be mutable/mutated.
                -"var" => The old-school way to declare variables. 
            Why does JavaScript allow assigning different data types to the same variable?
                -JavaScript is a dynamically typed language, meaning variables do not have fixed types. 
            How does JavaScript handle variables declared but not initialized? Illustrate with an example from the code.
                -javascript compiler will throw "Undefined" and Empty Values If you declare a variable but don’t assign a value to it immediately
            Discuss the significance of variable names in programming and how they are used in JavaScript.
                -Why Use Variables? 
                    -Variables are crucial for managing data dynamically. 
                    -They allow you to store and manipulate values easily, making your code flexible and reusable. For instance, you might store a user’s score in a variable and then use it to display a message or calculate a total.
        
        2.NUMERIC DATA TYPES:
            What are the various numeric data types used in JavaScript, as shown in the code?
            Explain the difference between integers, doubles, and Infinity in JavaScript with examples.
                -Integers => This are datatypes that define a whole number.
                -Doubles => This are datatypes that define numbers that contain decimal places.
                -Infinity => This are datatypes that are used to define variables in global scope.
            How does JavaScript handle arithmetic operations involving different numeric data types?
                -1. Basic Math Operations
                        Addition (+): Adds two numbers.
                            console.log(10.56 + 10); // 20.56
                        Subtraction (-): Subtracts the second number from the first.
                            console.log(23 - 6); // 17
                        Multiplication (*): Multiplies two numbers.
                            console.log(30 * 3); // 90
                        Division (/): Divides the first number by the second.
                            console.log(20 / 5); // 4
                        Modulus (%): Returns the remainder of a division operation.
                            console.log(9 % 4); // 1
                        Exponentiation (**): Raises the first number to the power of the second.
                            console.log(4 ** 2); // 16 (4^2 = 16)

        3.STRING DATA TYPES:
            How are strings represented in JavaScript?
                -Strings are represented in JavaScript using quotations ("") i.e let name = "Emmanuel"
            Discuss the difference between declaring strings with single quotes ('') and double quotes ("") in JavaScript.
                -Single vs. Double Quotes: Both single (') and double (") quotes are used to declare strings in JavaScript, and there's no functional difference. The choice between them is primarily a matter of style or to avoid escaping quotes inside strings.
            Explain why characters are automatically treated as strings in JavaScript.
                -Characters as Strings: JavaScript treats individual characters as strings because it doesn't have a separate character data type. A single character is simply a string with a length of 1.


        4.BOLEAN AND UNDEFINED DATA TYPES:
            Boolean Variables: Boolean variables represent two possible values: true or false. They are used in control flow to evaluate conditions and make decisions in the code.
            Undefined Concept: A variable is undefined when it is declared but has not been assigned a value. 

        5.NULL DATA TYPES:
            Significance of null: The null value represents the intentional absence of any object or value. It's used when a variable should hold no value.
            Difference Between null and undefined: null is an assigned value indicating "no value," whereas undefined means a variable has been declared but not assigned a value.

        6.OBJECT DATA TYPES:
            Objects in JavaScript: Objects are collections of key-value pairs where the keys are strings (or symbols) and the values can be any data type. They are used to group related data and functionality.
            countryInfo Object: This object might represent information about a country with properties like name, population, and language. Each property can be accessed via dot or bracket notation.
            Nested Objects: Objects can contain other objects, allowing for complex data structures

        7.ARRAY DATA TYPES:
            Purpose and Structure: Arrays are ordered collections of values that can be of any data type. They are used to store lists of items.
            Array of Arrays: Arrays can contain other arrays, allowing for multi-dimensional data storage. This is often referred to as a matrix or grid. 

        8.VARIABLES NAMING CONVENTION:
            Naming Conventions: In JavaScript, variable names should use camelCase, start with a letter, and be descriptive. Special characters are not allowed, except $ and _.
            Importance of Meaningful Names: Descriptive variable names improve code readability and maintainability. A good name explains the purpose of the variable without needing extra comments.
            Conventions Violated/Followed: Review the code for examples of variable names that may not follow best practices, such as using short or non-descriptive names like a or x.
            
        9.CONSTANTS IN JAVASCRIPT:
            Use of const: The const keyword is used to declare variables that cannot be reassigned after their initial assignment. It ensures that a variable remains constant throughout the program.
            Reassignment Error: Trying to reassign a const variable will throw an error because constants are immutable after their declaration.